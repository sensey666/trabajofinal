converterToCelsius(100)
# ejecutar
converterToCelsius=function(valueInFarenheit){ #input
#transformacion
resultInCelsius= (valueInFarenheit-32)*5/9
#output
return (resultInCelsius)
}
valueInFarenheit
# ejecutar
converterToCelsius=function(valueInFarenheit){ #input
#transformacion
resultInCelsius= (valueInFarenheit-32)*5/9
#output
return (resultInCelsius)
}
resultInCelsius
# ejecutar
converterToCelsius=function(valueInFarenheit){ #input
#transformacion
resultInCelsius= (valueInFarenheit-32)*5/9
#output
return (resultInCelsius)
}
converterToCelsius(100)
# ejecutar
converterToCelsius=function(valueInFarenheit){ #input
#transformacion
resultInCelsius= (valueInFarenheit-32)*5/9
#output
return (resultInCelsius)
}
converterToCelsius(10)
# ejecutar
converterToCelsius=function(valueInFarenheit){ #input
#transformacion
resultInCelsius= (valueInFarenheit-32)*5/9
#output
return (resultInCelsius)
}
converterToCelsius(1)
# ejecutar
converterToCelsius=function(valueInFarenheit){ #input
#transformacion
resultInCelsius= (valueInFarenheit)*5/9
#output
return (resultInCelsius)
}
converterToCelsius(1)
# ejecutar
converterToCelsius=function(valueInFarenheit){ #input
#transformacion
resultInCelsius= (valueInFarenheit-32)*5/9
#output
return (resultInCelsius)
}
converterToCelsius(1)
# ejecutar
converterToCelsius=function(valueInFarenheit){ #input
#transformacion
resultInCelsius= (valueInFarenheit-32)*5/9
#output
return (resultInCelsius)
}
converterToCelsius(2)
# ejecutar
converterToCelsius=function(valueInFarenheit){ #input
#transformacion
resultInCelsius= (valueInFarenheit-32)*5/9
#output
return (resultInCelsius)
}
converterToCelsius(100)
# 2 inputs:
XsumY=function(valueX,valueY){
###
resultSum=valueX+valueY
###
return (resultSum)
}
# 2 inputs:
XsumY=function(valueX,valueY){
###
resultSum=valueX+valueY
###
return (resultSum)
}
XsumY(3,10)
XsumY(1,1)
XsumY(3,10)
# 2 inputs:
XsumY=function(valueX,valueY){
###
resultSum=valueX+valueY
###
return (resultSum)
}
# 2 inputs:
XsumY=function(valueX,valueY){
###
resultSum=valueX+valueY
###
#return (resultSum)
}
riseToPower=function(base,exponent=2){
#####
result=1
if (exponent > 0){
for (time in 1:exponent){
result=result*base
}
}
#####
return(result)
}
riseToPower(9)
riseToPower(9,3)
riseToPower(9,0)
riseToPower=function(base,exponent=4){
#####
result=1
if (exponent > 0){
for (time in 1:exponent){
result=result*base
}
}
#####
return(result)
}
riseToPower(9)
riseToPower(9,3)
riseToPower(9,0)
riseToPower=function(base,exponent=3){
#####
result=1
if (exponent > 0){
for (time in 1:exponent){
result=result*base
}
}
#####
return(result)
}
riseToPower(9)
riseToPower(9,3)
riseToPower(9,0)
riseToPower(9)
riseToPower(9,3)
riseToPower(9,0)
riseToPower(9)
riseToPower(9,3)
riseToPower(9,0)
riseToPower(9)
riseToPower(9,3)
riseToPower(9,0)
riseToPower(9)
riseToPower(9,3)
riseToPower(9,0)
riseToPower=function(base,exponent=2){
#####
result=1
if (exponent > 0){
for (time in 1:exponent){
result=result*base
}
}
#####
return(result)
}
riseToPower(9)
riseToPower(9,3)
riseToPower(9,0)
# quizas esto es mas claro:
riseToPower(base=9,exponent=0)
# con argumentos explicitos no se require orden
riseToPower(exponent=0,base=9)
riseToPower(9)
riseToPower(9,3)
pio = riseToPower(9,0)
riseToPower(9)
riseToPower(9,3)
pio = c(riseToPower(9,0))
riseToPower(9)
riseToPower(9,3)
pio=c(riseToPower(9,0))
riseToPower(9)
riseToPower(9,3)
riseToPower(9,0)
divRounded=function(numerator,denominator,precision=2){
if (denominator==0){
return('0 en el denominador')
}else{
result = numerator/denominator
return (round(result, precision))}
}
n=13
d=12
p=3
divRounded(n,d,p)
factors=function(number){
vectorOfAnswers=c() # para guardar respuestas
for (i in 1:number){
#si el residuo de 'number'/'i' es igual a cero...
if ((number %% i) == 0){
# ...añade 'i' a la respuesta!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers)
}
inputArgs=list(precision=3,numerator=13,denominator=12)
do.call(divRounded,inputArgs)
factors(20)
factors(20)
factors=function(number){
vectorOfAnswers=c() # para guardar respuestas
for (i in 2:number){
#si el residuo de 'number'/'i' es igual a cero...
if ((number %% i) == 0){
# ...añade 'i' a la respuesta!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers)
}
factors(20)
factors=function(number){
vectorOfAnswers=c() # para guardar respuestas
for (i in 1:number){
#si el residuo de 'number'/'i' es igual a cero...
if ((number %% i) == 0){
# ...añade 'i' a la respuesta!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers)
}
factors(20)
factors=function(number){
vectorOfAnswers=c() # para guardar respuestas
for (i in 1:number){
#si el residuo de 'number'/'i' es igual a cero...
if ((number %% i) == 0){
# ...añade 'i' a la respuesta!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers)
}
number
factors=function(number){
vectorOfAnswers=c() # para guardar respuestas
for (i in 1:number){
#si el residuo de 'number'/'i' es igual a cero...
if ((number %% i) == 0){
# ...añade 'i' a la respuesta!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers)
}
vectorOfAnswers
factors=function(number){
vectorOfAnswers=c() # para guardar respuestas
for (i in 1:number){
#si el residuo de 'number'/'i' es igual a cero...
if ((number %% i) == 0){
# ...añade 'i' a la respuesta!
vectorOfAnswers=c(vectorOfAnswers,i)
}
}
return (vectorOfAnswers)
}
factors(2)
factors(3)
factors(2)
factors(4)
factors(3)
factors(20)
factors(3)
factors(10)
# factores
factors(20)
double=function(x){
return (2*x)}
myVector=c(1,2,3)
myVector=c(1,2,3)
double(myVector)
myList=list(1,2,3)
double(myList)
Map(double,myVector) # devuelte lista
Map(double,myList) # devuelte lista
mapply(double,myVector)
mapply(double,myList)
numberA=c(10,20,30,40,50)
numberB=c(6,7,8,9,10)
dataDF=data.frame(numberA,numberB)
dataDF
dataDF2=dataDF
# aqui está la copia
dataDF2
for (column in 1:ncol(dataDF2)){
for (row in 1:nrow(dataDF2[column])){
dataDF2[row,column]=double(dataDF2[row,column])
}
}
# updated:
dataDF2
dataDF2=dataDF
# aqui está la copia
dataDF2
dataDF
double(dataDF)
lapply(dataDF,double)
lapply(dataDF,double)
as.data.frame(lapply(dataDF,double))
# se aplica por sólo por columnas:
as.data.frame(lapply(dataDF,sum))
dataDF
# por fila
apply(dataDF,1,sum)
# por columna
apply(dataDF,2,sum)
Map(double,myList) # devuelte lista
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
nombre
instrumento
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
DF_vectors=data.frame(nombre,instrumento,edad,vivo)
DF_vectors
artistas=data.frame(nombre,instrumento,edad,vivo)
artistas
artistas=data.frame(nombre,instrumento,edad,vivo)
artistas
artistas=data.frame(nombre,instrumento,edad,vivo)
artistas
# cambio el valor de una edad:
studentsCopy[9,3]=42
# No hay advertencia, el cambio ya se hizo:
studentsCopy[3]
# cambio el valor de una edad:
edadCopy[9,3]=42
# cambio el valor de una edad:
artistasCopy[9,3]=42
artistas=data.frame(nombre,instrumento,edad,vivo)
artistas
# cambio el valor de una edad:
artistas[9,3]=42
# No hay advertencia, el cambio ya se hizo:
artistas[3]
artistas
DF_lists[6,4]
DF_lists[6,3]
names(DF_artistas)
names(artistas)
Paul McCartney(artistas)
Paul McCartney (artistas)
PaulMcCartney(artistas)
artistas[6]
artistas[6,]
artistas[6,]
artistas[artistas$edad>30 & artistas$vivo= T,]
artistas[artistas$edad>30 & artistas$vivo=='True',]
artistas[artistas$edad>30 & artistas$vivo=='True',]
artistas
artistas[artistas$edad>60 & artistas$vivo=='True',]
artistas
artistas[artistas$edad>60 & artistas$vivo=='TRUE',]
artistas
artistas[artistas$edad>60 & artistas$vivo=='TRUE',]
artistas[artistas$edad>60 & artistas$vivo=='TRUE',]
artistas[order(-artistas$edad),]
artistas[order(artistas$edad),]
artistas[order(artistas$edad),]
artistas_ordenada[order(artistas$edad),]
artistas_ordenada=artistas[order(artistas$edad),]
artistas_ordenada
nombre=c("George Harrison", "Mick Jagger", "John Lennon", "Paul McCartney",
"Jimmy Page", "Joe Perry")
banda = c("The Beatles", "The Rolling Stones", "The Beatles", "The Beatles",
"Led Zeppelin", "Aerosmith")
grammy=c(28, 4, 28, 28, 5, 4)
bandas=data.frame(nombre,banda,grammy)
bandas
artistas_total=merge(artistas,bandas)
artistas_total=merge(artistas,bandas)
artistas_total
nombre=c("George Harrison", "Mick Jagger", "John Lennon", "Paul McCartney",
"Jimmy Page", "Joe Perry")
banda = c("The Beatles", "The Rolling Stones", "The Beatles", "The Beatles",
"Led Zeppelin", "Aerosmith")
grammy=c(28, 4, 28, 28, 5, 4)
bandas=data.frame(nombre,banda,grammy)
bandas
artistas_total=merge(artistas,bandas)
artistas_total
nombre0=c("George Harrison", "Mick Jagger", "John Lennon", "Paul McCartney",
"Jimmy Page", "Joe Perry")
banda = c("The Beatles", "The Rolling Stones", "The Beatles", "The Beatles",
"Led Zeppelin", "Aerosmith")
grammy=c(28, 4, 28, 28, 5, 4)
bandas=data.frame(nombre0,banda,grammy)
bandas
artistas_total=merge(artistas,bandas)
artistas_total
nombre=c("George Harrison", "Mick Jagger", "John Lennon", "Paul McCartney",
"Jimmy Page", "Joe Perry")
banda = c("The Beatles", "The Rolling Stones", "The Beatles", "The Beatles",
"Led Zeppelin", "Aerosmith")
grammy=c(28, 4, 28, 28, 5, 4)
bandas=data.frame(nombre,banda,grammy)
bandas
artistas_total=merge(artistas,bandas)
artistas_total
nrow(artistas_total)
artistas_total[which.max(artistas_total$edad),]
artistas_ordenada=artistas[order(-artistas$grammys),]
artistas_ordenada_grammys=artistas_total[order(-artistas$grammys),]
artistas_total[order(-artistas$grammys),]
artistas_ordenada_grammys=artistas_total[order(-artistas_total$grammys),]
artistas_total[order(-artistas_total$grammys),]
artistas_total[which.max(artistas_total$edad),]
artistas_total[which.max(artistas_total$edad),]
artistas_total[order(-artistas_total$grammys),]
artistas_total=merge(artistas,bandas)
artistas_total
nrow(artistas_total)
artistas_total[which.max(artistas_total$edad),]
artistas_total[order(-artistas_total$grammys),]
artistas_total[order(-artistas_total$grammy),]
artistas_total[order(-artistas_total$grammy),]
artistas_total[order(-artistas_total$grammy),]
artistas_total[artistas_total$grammy<5]
artistas_total[artistas_total$grammy<5]
artistas_total[order(-artistas_total$grammy),]
artistas_total[artistas_total$grammy<5,]
artistas_total[artistas_total$grammy<6,]
artistas_total[artistas_total$grammy<5,]
artistas[artistas$edad>60 & artistas$banda=='The Beatles',]
artis=artistas_total[artistas_total$grammy<5,]
artis[,c(1,6)]
View(artistas_total)
instru= artistas_total[which.max(artistas_total$edad),]$ artistas_total[artistas$banda=='The Beatles',]
artistas_total[which.max(artistas_total$edad),]$ artistas_total[artistas$banda=='The Beatles',]
artistas_total[which.max(artistas_total$edad),] artistas_total[artistas$banda=='The Beatles',]
artistas_total[which.max(artistas_total$edad),] artistas_total[artistas_total$banda=='The Beatles',]
artistas_total[which.max(artistas_total$edad),]&artistas_total[artistas_total$banda=='The Beatles',]
artistas_total[which.max(artistas_total$edad),]
artistas_total[artistas_total$banda=='The Beatles',]
instru=artistas_total[which.max(artistas_total$edad),]
instru[instru$banda=='The Beatles',]
instru=artistas_total[which.max(artistas_total$edad),]
instru[instru$banda=='The Beatles',]
instru[,c(2,3,5)]
instru=artistas_total[which.max(artistas_total$edad),]
r=instru[instru$banda=='The Beatles',]
r[,c(2,3,5)]
# cambio el valor de una edad:
artistas[9,3]=42
# No hay advertencia, el cambio ya se hizo:
artistas[3]
artistas[9,3]=42
artistas[c(9)]
artistas[9,3]=42
artistas[c(9),]
artistas[9,3]=42
artistas[c(9),c(1,3)]
artistas=data.frame(nombre,instrumento,edad,vivo)
artistas[9,3]=42
artistas[3]
artistas=data.frame(nombre,instrumento,edad,vivo)
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
artistas=data.frame(nombre,instrumento,edad,vivo)
artistas
a=artistas[9,3]=42
a=artistas[c(9),c(1,3)]
a
artistas[6,]
artistas[artistas$edad>60 & artistas$vivo=='TRUE',]
a=artistas[9,3]=42
a
a=artistas[9,3]=42
a=artistas[c(9),c(1,3)]
a
head(artistas,3)
artistas[artistas$instrumento=='Bajo',]
artistas[6,]
unique(artistas[artistas$edad>60])&(artistas$vivo),]$instrumento)
unique(artistas[artistas$edad>60])&(artistas$vivo),]$instrumento)
unique(artistas[artistas$edad>60])&artistas$vivo,]$instrumento)
unique(artistas[artistas$edad>60]&artistas$vivo,]$instrumento)
unique(artistas[artistas$edad>60&artistas$vivo,]$instrumento)
unique(artistas[artistas$edad>60&artistas$vivo,]$instrumento)
setwd("C:/Users/usuario/Desktop/ProyectoFinal/ProyectoFinal")
setwd("C:/Users/usuario/Desktop/ProyectoFinal/ProyectoFinal")
